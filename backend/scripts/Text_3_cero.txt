import bpy
import os
import json
from mathutils import Vector

# Rutas de exportaciÃ³n
export_path = r"D:/UCC/React/PortafolioUCC/Project/game-project/public/models/toycar2"
json_path = os.path.join(export_path, "toy_car_blocks.json")
os.makedirs(export_path, exist_ok=True)

positions = []

# ConfiguraciÃ³n de Blender
depsgraph = bpy.context.evaluated_depsgraph_get()
bpy.ops.object.mode_set(mode='OBJECT')
bpy.context.view_layer.update()

# Recorremos los objetos seleccionados
for obj in bpy.context.selected_objects:
    if obj.type != 'MESH':
        continue

    obj_eval = obj.evaluated_get(depsgraph)
    matrix_world = obj_eval.matrix_world
    loc = matrix_world.to_translation()

    name = obj.name.lower().replace(" ", "_")

    # ConversiÃ³n de coordenadas al sistema de Three.js
    pos = {
        "name": name,
        "x": 0.0,            # X se mantiene
        "y": 0.0,            # Z de Blender â†’ Y de Three.js
        "z": 0.0            # Y de Blender â†’ Z (invertido)
    }

    positions.append(pos)
    print(f"ðŸ“¦ {name}: ({pos['x']}, {pos['y']}, {pos['z']})")

    # Exportar modelo .glb individual
    bpy.ops.object.select_all(action='DESELECT')
    obj.select_set(True)
    bpy.context.view_layer.objects.active = obj

    filepath = os.path.join(export_path, f"{name}.glb")
    bpy.ops.export_scene.gltf(
        filepath=filepath,
        use_selection=True,
        export_format='GLB',
        export_apply=False
    )

# Guardar archivo JSON con las posiciones convertidas
with open(json_path, "w") as f:
    json.dump(positions, f, indent=4)

print("âœ… ExportaciÃ³n finalizada con sistema de coordenadas compatible con Three.js.")
